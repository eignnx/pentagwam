HumanPoweredVm(
    fields: {
        "X1": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["A1"],
        ),
        "X2": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["A2"],
        ),
        "X3": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["A3"],
        ),
        "X4": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["A4"],
        ),
        "heap_ptr": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["H", "hp"],
        ),
        "instr_ptr": FieldData(
            ty: Usize,
            default: Some(Usize(0)),
            aliases: ["P", "ip"],
        ),
        "mode": FieldData(
            ty: Symbol,
            default: Some(Symbol("read")),
            aliases: [],
        ),
        "structure_ptr": FieldData(
            ty: CellRef,
            default: None,
            aliases: ["S"],
        ),
    },
    instr_scripts: {
        "get_structure": "# The `get_structure` instruction starts by dereferencing A1\n# and checking whether it is free\n# - If it is free, it sets the current mode to `Mode::Write`. This makes\n# the rest of the `get_structure` behave like `put_structure`, and it\n# makes the subsequent `unify_variable` instructions behave like\n# `set_variable`.\n# - If it is bound, it sets the current mode to `Mode::Read`. This makes\n# the rest of the `get_structure` and the subsequent `unify_variable`\n# instructions do matching against the existing term, instead of\n# constructing a new one.\n# \n# # Alternate Explanation\n# This instruction marks the beginning of a structure (without embedded\n# substructures) occurring as a head argument. The instruction gets the\n# value of register Ai and dereferences it. If the result is a\n# reference to a variable, that variable is bound to a new structure\n# pointer pointing at the top of the heap, and the binding is trailed\n# if necessary, functor F is pushed onto the heap, and execution\n# proceeds in \"write\" mode. Otherwise, if the result is a structure and\n# its functor is identical to functor F, the pointer S is set to point\n# to the arguments of the structure, and execution proceeds in \"read\"\n# mode. Otherwise, backtracking occurs.\n\n# Script for instruction `get_structure`",
    },
)